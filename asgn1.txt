>db.createCollection('movies')
{"ok" : 1}

>show collections
movies

>db.movies.insertMany(
[
{title : "Fight Club", writer : "Chuck Palahniuko", year : 1999", actors : ["Brad Pitt","Edward Norton"]},
{title : "Pulp Fiction", writer : "Quentin Tarantino", year : 1994, actors : ["Jhon Travolta","Uma Thurman"]},
{title : "Inglorious Baterds", writer : "Quentin Tarantino", year : 2009, actors : ["Brad Pitt","Diane Kruger","Eli Roth"]},
{title : "The Hobbit: An unexpected Journey", writer : "J.R.R. Tolkein", year : "2012", franchise : "The Hobbit"},
{title : "The Hobbit: The Desolation of Smaug", writer : "J.R.R Tolkien", year : "2013", franchise : "The Hobbit"},
{title : "The Hobbit: The Battle of the Five Armies", writer : "J.R.R Tolkien", year : "2012", franchise : "The Hobbit", synopsis : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."},
{title : "Pee Wee Herman's Big Adventures"}
{title : "Avatar"}
]
)
{acknowlegded : "true" ,Inserted}

QUERY/FIND DOCUMENTS
---------------------------------------------------------------------
1)Get all Documents.
> db.movies.find()
{
        "_id" : ObjectId("6107e17ad0e50889590eb8ac"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("6107e1d4d0e50889590eb8ad"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Jhon Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("6107e232d0e50889590eb8ae"),
        "title" : "Inglorious Baterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("6107e2d5d0e50889590eb8af"),
        "title" : "The Hobbit: An unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : "2012",
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("6107e4d5d0e50889590eb8a0"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R Tolkien",
        "year" : "2013",
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("6107e375d0e50889590eb8b1"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R Tolkien",
        "year" : "2012",
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}
{
        "_id" : ObjectId("6107e3bfd0e50889590eb8b2"),
        "title" : "Pee Wee Herman's Big Adventures"
}
{ "_id" : ObjectId("6107e3d2d0e50889590eb8b3"), "title" : "Avatar" }
-------------------------------------------------------------------
2)Get all documents with writer set to "Quentin tarantino"
>db.movies.find({writer:"Quentin Tarantino"})
{
        "_id" : ObjectId("6107e1d4d0e50889590eb8ad"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Jhon Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("6107e232d0e50889590eb8ae"),
        "title" : "Inglorious Baterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
--------------------------------------------------------------------------
3)Get All the docs where actors include Brad pitt.
> db.movies.find({actors:"Brad Pitt"})
{
        "_id" : ObjectId("6107e17ad0e50889590eb8ac"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("6107e232d0e50889590eb8ae"),
        "title" : "Inglorious Baterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
-------------------------------------------------------
4)Get all the docs having fanchise as The Hobbit
> db.movies.find({franchise:"The Hobbit"})
{
        "_id" : ObjectId("6107e2d5d0e50889590eb8af"),
        "title" : "The Hobbit: An unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : "2012",
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("6107e4d5d0e50889590eb8a0"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R Tolkien",
        "year" : "2013",
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("6107e4d5d0e50889590eb8a1"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R Tolkien",
        "year" : "2012",
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}
-----------------------------------------------------------
5) All movies released in 1990s
> db.movies.find({year:{$gt:"1990", $lt:"2000"}})
{
        "_id" : ObjectId("6107e17ad0e50889590eb8ac"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("6107e17ad0e50889590eb8ad"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Jhon Travolta",
                "Uma Thurman"
        ]
}
-----------------------------------------------------------------
6)All movies before 2000 and after 2010.
> db.movies.find({$or:[{year:{$gt:"2010"}},{year: {$lt:"2000"}}]})
{
        "_id" : ObjectId("6107e17ad0e50889590eb8ac"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("6107e1d4d0e50889590eb8ad"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Jhon Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("6107e17ad0e50889590eb8af"),
        "title" : "The Hobbit: An unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : "2012",
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("6107e17ad0e50889590eb8b0"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R Tolkien",
        "year" : "2013",
        "franchise" : "The Hobbit"
}
---------------------------------------------------------------------------------
UPDATE DOCUMENTS
------------------------------------------------------------------------------------
1)
>db.movies.update({_id:ObjectId("6107e375d0e50889590eb8b1")} ,{$set:{synopsis:"A reluctant habbit,Bilbo baggings sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home- and the gold within it-from the dragon smaug."}})

WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 1 })
-------------------------------------------------------------------------------
2)
>db.movies.update({_id:ObjectId("6107e2d5d0e50889590eb8af")}, {$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})

WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 1 })
-------------------------------------------------------------------------------
3)
>db.movies.update({_id:ObjectId("6107e1d4d0e50889590eb8ad")}, {$push:{actors:"Samuel L. Jackson"}})

WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 1 })
-------------------------------------------------------------------------------------
TEXT SEARCH
--------------------------------------------------------------------------------------
1)find all movies that have a synopsis that contains the word "Bilbo"
>db.movies.find({synopsis:{$regex:"Bilbo"}})
{
        "_id" : ObjectId("6107e2d5d0e50889590eb8af"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R Tolkien",
        "year" : "2002",
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant habbit,Bilbo baggings sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home- and the gold within it-from the dragon smaug."}})
}
----------------------------------------------------------------------------------
2.find all movies that have a synopsis that contains the word "Gandalf"
>db.movies.find({synopsis:{$regex:"Gandalf"}}]})

-------------------------------------------------------------------------------------------
3.find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf
>db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]})
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
>db.movies.find({$or:[{synopsis:{$regex:"dwarves"}}, {synopsis:{$regex:"hobbit"}}]})
----------------------------------------------------------------------------------------------
5.find all movies that have a synopsis that contains the word "gold" and "dragon"
>db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"dragon"}}]})
------------------------------------------------------------------------------------------
DELETE
-------------------------------------------------------------------
1.delete the movie "Pee Wee Herman's Big Adventure"
>db.movies.remove({_id:ObjectId("6107e3bfd0e50889590eb8b2")})

WriteResult({ "nRemoved" : 1 })
-------------------------------------------------------------------------------------------
2.delete avatar
>db.movies.remove({_id:ObjectId("6107e3bfd0e50889590eb8b3")})

WriteResult({ "nRemoved" : 1 })
-----------------------------------------------------------------------------------------
POSTS
------------------------------------------------------------------
>db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party",  body:"Wakes up early and cleans house"})                             
WriteResult({ "nInserted" : 1 })
>db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})
WriteResult({ "nInserted" : 1 })
>db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})
WriteResult({ "nInserted" : 1 })
>db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})
WriteResult({ "nInserted" : 1 })
>db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})
WriteResult({ "nInserted" : 1 })
>db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})
WriteResult({ "nInserted" : 1 })

-------------------------------------------------------------------------
COMMENTS
---------------------------------------------------------------------------
>db.comments.insert({ username:"GoodGuyGreg", comment:"Hope you got a good deal!", post:ObjectId("6107f2e5d0e50889590eb8b6")})
WriteResult({ "nInserted" : 1 })
>db.comments.insert({username:"GoodGuyGreg", comment:"What's mine is yours!", post:ObjectId("6107f301d0e50889590eb8b7")})
WriteResult({ "nInserted" : 1 })
>db.comments.insert({username:"GoodGuyGreg", comment:"Don't violate the licensing agreement!", post:ObjectId("6107f33ad0e50889590eb8b8")})
WriteResult({ "nInserted" : 1 })
>db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean", post:ObjectId("6107f33ad0e50889590eb8b9")})
WriteResult({ "nInserted" : 1 })
>db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack", post:ObjectId("6107f2b6d0e50889590eb8b5")})
WriteResult({ "nInserted" : 1 })
---------------------------------------------------------------------------------------------
USERS
-------------------------------------------------------------------------------------
>db.users.insert({_id:1,username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})
WriteResult({ "nInserted" : 1 })
>db.users.insert({_id:2, username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})
WriteResult({ "nInserted" : 1 })

>show collections
comments
posts
users
---------------------------------------------------------------
QUERING COLLECTIONS
----------------------------------
1.find all users
>db.users.find().pretty()
{
        "_id" : 1,
        "username" : "GoodGuyGreg",
        "first_name" : "Good Guy",
        "last_name" : "Greg"
}
{
        "_id" : 2,
        "username" : "ScumbagSteve",
        "fullname" : {
                "first" : "Scumbag",
                "last" : "Steve"
        }
}
--------------------------------------------------
2.find all posts

>db.posts.find().pretty()
{
        "_id" : ObjectId("6107f24fd0e50889590eb8b3"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at Party",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("6107f284d0e50889590eb8b4"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("6107f2b6d0e50889590eb8b5"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a pull request"
}
{
        "_id" : ObjectId("6107f2e5d0e50889590eb8b6"),
        "username" : "ScumbagSteve",
        "title" : "Borrows something",
        "body" : "Sells it"
}
{
        "_id" : ObjectId("6107f301d0e50889590eb8b7"),
        "username" : "ScumbagSteve",
        "title" : "Borrows everything",
        "body" : "The end"
}
{
        "_id" : ObjectId("6107f33ad0e50889590eb8b9"),
        "username" : "ScumbagSteve",
        "title" : "Forks your repo on github",
        "body" : "Sets to private"
}
--------------------------------------------------------------------
3.Posts authored by greg
>db.posts.find({username:"GoodGuyGreg"})
{
        "_id" : ObjectId("6107f24fd0e50889590eb8b3"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at Party",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("6107f284d0e50889590eb8b4"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("6107f2b6d0e50889590eb8b5"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a pull request"
}
---------------------------------------------------------
4.posts authored by scumnagsteve
>db.posts.find({username:"ScumbagSteve"})
{
        "_id" : ObjectId("6107f2e5d0e50889590eb8b6"),
        "username" : "ScumbagSteve",
        "title" : "Borrows something",
        "body" : "Sells it"
}
{
        "_id" : ObjectId("6107f301d0e50889590eb8b7"),
        "username" : "ScumbagSteve",
        "title" : "Borrows everything",
        "body" : "The end"
}
{
        "_id" : ObjectId("6107f33ad0e50889590eb8b9"),
        "username" : "ScumbagSteve",
        "title" : "Forks your repo on github",
        "body" : "Sets to private"
}
--------------------------------------------------------
5.all comments
>db.comments.find().pretty()
{
        "_id" : ObjectId("6107f4c3d0e50889590eb8bb"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : ObjectId("6107f2e5d0e50889590eb8b6")
}
{
        "_id" : ObjectId("6107f509d0e50889590eb8bc"),
        "username" : "GoodGuyGreg",
        "comment" : "What's mine is yours!",
        "post" : ObjectId("6107f301d0e50889590eb8b7")
}
{
        "_id" : ObjectId("6107f560d0e50889590eb8bd"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : ObjectId("6107f33ad0e50889590eb8b9")
}
{
        "_id" : ObjectId("6107f5dfd0e50889590eb8b6"),
        "username" : "ScumbagSteve",
        "comment" : "It still isn't clean",
        "post" : ObjectId("6107f33ad0e50889590eb8b9")
}
{
        "_id" : ObjectId("6107f67fd0e50889590eb8bf"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : ObjectId("6107f2b6d0e50889590eb8b5")
}

------------------------------------------------------------------
6.cmnts by good guy greg
>db.comments.find({username:"GoodGuyGreg"})
{
        "_id" : ObjectId("6107f4c3d0e50889590eb8bb"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : ObjectId("6107f2e5d0e50889590eb8b6")
}
{
        "_id" : ObjectId("6107f509d0e50889590eb8bc"),
        "username" : "GoodGuyGreg",
        "comment" : "What's mine is yours!",
        "post" : ObjectId("6107f301d0e50889590eb8b7")
}
{
        "_id" : ObjectId("6107f560d0e50889590eb8bd"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : ObjectId("6107f33ad0e50889590eb8b9")
}

------------------------------------------------------------
7.cmnts by scumbag
>db.comments.find({username:"ScumbagSteve"}).pretty()
{
        "_id" : ObjectId("6107f5dfd0e50889590eb8be"),
        "username" : "ScumbagSteve",
        "comment" : "It still isn't clean",
        "post" : ObjectId("6107f33ad0e50889590eb8b9")
}
{
        "_id" : ObjectId("6107f67fd0e50889590eb8bf"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : ObjectId("6107f2b6d0e50889590eb8b5")
}

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^











